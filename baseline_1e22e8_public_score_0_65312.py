# -*- coding: utf-8 -*-
"""baseline-1e22e8 public score 0.65312.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1un87Ii7MXAdVR7G_m4EFNhiO6z2JKfve
"""

import numpy as np
import pandas as pd
import warnings
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler

warnings.filterwarnings(action='ignore')

x_train = pd.read_csv('/kaggle/input/uou-ie-g-03874-spring-2025-term-project/ML_x_train.csv')
x_test = pd.read_csv('/kaggle/input/uou-ie-g-03874-spring-2025-term-project/ML_x_test.csv')
y_train = pd.read_csv('/kaggle/input/uou-ie-g-03874-spring-2025-term-project/ML_y_train.csv')

x_train.info

x_test.info

"""## 데이터 전처리"""

# 파생변수

x_train['loan_to_income_ratio'] = x_train['Total_EMI_per_month'] / (x_train['Monthly_Inhand_Salary'] + 1)
x_test['loan_to_income_ratio'] = x_test['Total_EMI_per_month'] / (x_test['Monthly_Inhand_Salary'] + 1)

# drop_columns = [
#     'Occupation',
#     'Annual_Income',
#     'Num_Credit_Inquiries',
#     'Amount_invested_monthly',
# 이거 작동 안하고 있>??

from sklearn.impute import SimpleImputer

# 결측치 처리: 중앙값으로 대체
imputer = SimpleImputer(strategy='median')
x_train = pd.DataFrame(imputer.fit_transform(x_train), columns=x_train.columns)
x_test = pd.DataFrame(imputer.transform(x_test), columns=x_test.columns)

# 스케일링
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

"""## 모델링"""

from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score

# 데이터 분할
x_trn, x_val, y_trn, y_val = train_test_split(
    x_train_scaled, y_train, test_size=0.2, random_state=42, stratify=y_train
)

# 파라미터 그리드 설정 및 학습
param_grid = {
    'n_estimators': [150, 200],
    'max_depth': [10, 15, 20],
    'min_samples_split': [2, 5],
    'min_samples_leaf': [1, 2],
    'max_features': ['sqrt', 'log2'],
    'class_weight': ['balanced']
}

grid_model = GridSearchCV(
    RandomForestClassifier(random_state=42),
    param_grid,
    cv=3,
    scoring='f1_macro',
    n_jobs=-1
)
grid_model.fit(x_trn, y_trn.values.ravel())

# 검증 및 결과
best_model = grid_model.best_estimator_
pred_val = best_model.predict(x_val)
f1 = f1_score(y_val, pred_val, average='macro')
print("F1 Score (validation, macro):", f1)
print("Best parameters:", grid_model.best_params_)

# 전체 데이터로 재학습 및 예측
best_model.fit(x_train_scaled, y_train.values.ravel())
pred_test = best_model.predict(x_test_scaled)

"""## Submission(제출)"""

# 제출 파일 템플릿 로드
result = pd.read_csv('/kaggle/input/uou-ie-g-03874-spring-2025-term-project/ML_sample_submission.csv')

# 예측 결과 삽입
result['Credit_Score'] = pred_test

# 제출 파일 저장
result.to_csv('submission.csv', index=False)

