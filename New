{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":101385,"databundleVersionId":12220852,"sourceType":"competition"}],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# # 라이브러리\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:07.976539Z\",\"iopub.execute_input\":\"2025-06-03T17:56:07.976863Z\",\"iopub.status.idle\":\"2025-06-03T17:56:11.262141Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:07.976837Z\",\"shell.execute_reply\":\"2025-06-03T17:56:11.261221Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n!pip install -U scikit-learn==1.3.2 imbalanced-learn==0.11.0\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:11.263917Z\",\"iopub.execute_input\":\"2025-06-03T17:56:11.264206Z\",\"iopub.status.idle\":\"2025-06-03T17:56:16.852761Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:11.264183Z\",\"shell.execute_reply\":\"2025-06-03T17:56:16.851990Z\"}}\n# 기본 라이브러리\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport shap\nimport matplotlib\nimport warnings\n\nwarnings.filterwarnings(action='ignore')\n\n# 전처리 및 유틸\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom sklearn.pipeline import Pipeline\nfrom imblearn.pipeline import Pipeline\nfrom sklearn.base import clone\nfrom scipy.stats import mode\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.inspection import permutation_importance\nfrom tqdm.notebook import tqdm\nfrom sklearn.svm import SVC\nfrom imblearn.combine import SMOTETomek\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\n\n# 모델 평가 / 지표\nfrom sklearn.metrics import accuracy_score, f1_score, make_scorer, classification_report, confusion_matrix\nfrom sklearn.metrics import roc_auc_score, precision_recall_curve, auc\n\n# 데이터 분할 및 교차검증\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, RandomizedSearchCV, cross_val_score\n\n# 분류 모델\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, VotingClassifier, StackingClassifier, BaggingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# # 데이터 불러오기\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:16.853448Z\",\"iopub.execute_input\":\"2025-06-03T17:56:16.853979Z\",\"iopub.status.idle\":\"2025-06-03T17:56:16.886303Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:16.853935Z\",\"shell.execute_reply\":\"2025-06-03T17:56:16.885615Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx_train = pd.read_csv('/kaggle/input/uou-ie-g-03874-spring-2025-term-project/ML_x_train.csv')\nx_test = pd.read_csv('/kaggle/input/uou-ie-g-03874-spring-2025-term-project/ML_x_test.csv')\ny_train = pd.read_csv('/kaggle/input/uou-ie-g-03874-spring-2025-term-project/ML_y_train.csv')\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:16.887004Z\",\"iopub.execute_input\":\"2025-06-03T17:56:16.887218Z\",\"iopub.status.idle\":\"2025-06-03T17:56:16.911934Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:16.887203Z\",\"shell.execute_reply\":\"2025-06-03T17:56:16.911038Z\"}}\nx_train\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:16.914176Z\",\"iopub.execute_input\":\"2025-06-03T17:56:16.914506Z\",\"iopub.status.idle\":\"2025-06-03T17:56:16.924716Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:16.914482Z\",\"shell.execute_reply\":\"2025-06-03T17:56:16.923729Z\"}}\ny_train\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:16.925487Z\",\"iopub.execute_input\":\"2025-06-03T17:56:16.925768Z\",\"iopub.status.idle\":\"2025-06-03T17:56:16.952612Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:16.925747Z\",\"shell.execute_reply\":\"2025-06-03T17:56:16.951553Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx_test\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# # 데이터 분석\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# [참고] Credit Score Classification Part:1 Data Cleaning\n# \n#  - https://www.kaggle.com/code/clkmuhammed/credit-score-classification-part-1-data-cleaning#B.-Examining-the-Data\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:16.953982Z\",\"iopub.execute_input\":\"2025-06-03T17:56:16.954891Z\",\"iopub.status.idle\":\"2025-06-03T17:56:16.972248Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:16.954863Z\",\"shell.execute_reply\":\"2025-06-03T17:56:16.971371Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 숫자를 지수표기법(e) 대신 소수점 두 자리로 표시\npd.options.display.float_format = '{:.2f}'.format\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:16.973151Z\",\"iopub.execute_input\":\"2025-06-03T17:56:16.973491Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.000423Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:16.973461Z\",\"shell.execute_reply\":\"2025-06-03T17:56:16.999437Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# train/test 데이터 크기 확인\nx_train.shape, x_test.shape\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.001683Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.001913Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.024594Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.001898Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.024030Z\"}}\nx_train.info()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.025131Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.025307Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.040548Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.025279Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.039758Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx_test.info()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.041578Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.041803Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.063643Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.041785Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.062656Z\"}}\ny_train.info()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.065018Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.065232Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.115659Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.065214Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.115017Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx_train.describe().T\n\n# std는 표준편차, mean 평균, min 최소, max 최대\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.116188Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.116410Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.155771Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.116390Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.155034Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx_test.describe().T\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.158935Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.159190Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.170657Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.159173Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.169945Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ny_train.describe().T\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# # 데이터 전처리\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 1. 데이터 통합 (x_train/test)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.171368Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.171544Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.190130Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.171528Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.189237Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# train/test 데이터 통합 (데이터 전처리하고 다시 분리 예정)\nx_train['is_train'] = 1\nx_test['is_train'] = 0\nx = pd.concat([x_train, x_test], ignore_index=True)\nx.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.191046Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.191305Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.242622Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.191282Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.242028Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx.describe().T\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 2. 결측치 확인\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.243154Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.243340Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.250233Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.243324Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.249584Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 각 열 결측치 개수 확인\nx.isna().sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.250936Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.251189Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.273149Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.251172Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.272275Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 각 열의 결측치 비율 확인\nx.isnull().mean()*100\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 3. 이상치 확인\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.274317Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.274567Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.294330Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.274548Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.293340Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx_copy = x.copy()\nx_copy.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.295330Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.295529Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.314298Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.295516Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.313449Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx = x_copy\nx.info()\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 4. 이상치, 결측값 처리\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# [참고] Credit score classification 80% score 7 models\n# \n# https://www.kaggle.com/code/abdelaziznabil/credit-score-classification-80-score-7-models\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.314829Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.315085Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.328818Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.315028Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.328029Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndef Distribution(column, data, i):\n    fig, ax = plt.subplots(1, 2, figsize=(15, 5))\n    title = ['Before Distribution', 'After Distribution']\n    sns.set(style='whitegrid')\n    \n    if i == 0:\n        sns.kdeplot(data=data, x=column, ax=ax[0], color='r').set_title(title[i])\n        sns.boxplot(data=data, x=column, ax=ax[1], palette='magma').set_title(title[i])\n    else:\n        sns.kdeplot(data=data, x=column, ax=ax[0], color='#2171b5').set_title(title[i])\n        sns.boxplot(data=data, x=column, ax=ax[1], color='#2171b5').set_title(title[i])\n    \n    plt.tight_layout()\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Age 만 나이\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.329487Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.329694Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.690140Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.329675Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.689438Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Age',data=x,i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.690726Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.690976Z\",\"iopub.status.idle\":\"2025-06-03T17:56:17.707754Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.690937Z\",\"shell.execute_reply\":\"2025-06-03T17:56:17.706912Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 이상치 처리 및 음수 제거: 20 ~ 100 범위 유효\nx.loc[(x['Age'] < 20) | (x['Age'] > 100), 'Age'] = np.nan\n\n# 결측값 처리: Occupation 그룹 기준 중앙값 대체\nx['Age'] = x.groupby('Occupation')['Age'].transform(lambda x: x.ffill().bfill())\nx['Age'].fillna(x['Age'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:17.708696Z\",\"iopub.execute_input\":\"2025-06-03T17:56:17.708983Z\",\"iopub.status.idle\":\"2025-06-03T17:56:18.275692Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:17.708935Z\",\"shell.execute_reply\":\"2025-06-03T17:56:18.274543Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Age',data=x,i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Annual_Income 연간 총 소득\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:18.276613Z\",\"iopub.execute_input\":\"2025-06-03T17:56:18.276902Z\",\"iopub.status.idle\":\"2025-06-03T17:56:19.035802Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:18.276877Z\",\"shell.execute_reply\":\"2025-06-03T17:56:19.035029Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Annual_Income', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:19.036642Z\",\"iopub.execute_input\":\"2025-06-03T17:56:19.036871Z\",\"iopub.status.idle\":\"2025-06-03T17:56:19.045455Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:19.036853Z\",\"shell.execute_reply\":\"2025-06-03T17:56:19.044486Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 음수 또는 0 → NaN 처리\nx.loc[x['Annual_Income'] <= 0, 'Annual_Income'] = np.nan\n\n# 100만 초과도 NaN 처리\nx.loc[x['Annual_Income'] > 1_000_000, 'Annual_Income'] = np.nan\n\n# 결측값 처리\nx['Annual_Income'].fillna(x['Annual_Income'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:19.046438Z\",\"iopub.execute_input\":\"2025-06-03T17:56:19.046758Z\",\"iopub.status.idle\":\"2025-06-03T17:56:19.629772Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:19.046734Z\",\"shell.execute_reply\":\"2025-06-03T17:56:19.628750Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Annual_Income', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Monthly_Inhand_Salary 매월 실수령액\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:19.630616Z\",\"iopub.execute_input\":\"2025-06-03T17:56:19.630845Z\",\"iopub.status.idle\":\"2025-06-03T17:56:20.128016Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:19.630825Z\",\"shell.execute_reply\":\"2025-06-03T17:56:20.127010Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Monthly_Inhand_Salary', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:20.129321Z\",\"iopub.execute_input\":\"2025-06-03T17:56:20.129657Z\",\"iopub.status.idle\":\"2025-06-03T17:56:20.136841Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:20.129634Z\",\"shell.execute_reply\":\"2025-06-03T17:56:20.135865Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 결측값 처리: Annual_Income 기반 유추\nmiss_salary = x['Monthly_Inhand_Salary'].isna()\nx.loc[miss_salary, 'Monthly_Inhand_Salary'] = x.loc[miss_salary, 'Annual_Income'] / 12\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:20.138136Z\",\"iopub.execute_input\":\"2025-06-03T17:56:20.138404Z\",\"iopub.status.idle\":\"2025-06-03T17:56:20.637785Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:20.138383Z\",\"shell.execute_reply\":\"2025-06-03T17:56:20.636940Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Monthly_Inhand_Salary', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Num_Bank_Accounts 보유 중인 은행 계좌 수\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:20.638881Z\",\"iopub.execute_input\":\"2025-06-03T17:56:20.639166Z\",\"iopub.status.idle\":\"2025-06-03T17:56:21.159484Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:20.639145Z\",\"shell.execute_reply\":\"2025-06-03T17:56:21.158405Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Num_Bank_Accounts', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:21.160340Z\",\"iopub.execute_input\":\"2025-06-03T17:56:21.160566Z\",\"iopub.status.idle\":\"2025-06-03T17:56:21.168257Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:21.160550Z\",\"shell.execute_reply\":\"2025-06-03T17:56:21.167333Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 이상치 처리: 0~11 범위 외 제거, 결측값은 최빈값으로 대체\nx.loc[(x['Num_Bank_Accounts'] < 0) | (x['Num_Bank_Accounts'] > 11), 'Num_Bank_Accounts'] = np.nan\nx['Num_Bank_Accounts'].fillna(x['Num_Bank_Accounts'].mode()[0], inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:21.169127Z\",\"iopub.execute_input\":\"2025-06-03T17:56:21.169875Z\",\"iopub.status.idle\":\"2025-06-03T17:56:21.672420Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:21.169848Z\",\"shell.execute_reply\":\"2025-06-03T17:56:21.671628Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Num_Bank_Accounts', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Num_Credit_Card 보유 중인 신용카드 수\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:21.673379Z\",\"iopub.execute_input\":\"2025-06-03T17:56:21.673654Z\",\"iopub.status.idle\":\"2025-06-03T17:56:22.200074Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:21.673632Z\",\"shell.execute_reply\":\"2025-06-03T17:56:22.199166Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Num_Credit_Card', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:22.200833Z\",\"iopub.execute_input\":\"2025-06-03T17:56:22.201093Z\",\"iopub.status.idle\":\"2025-06-03T17:56:22.208344Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:22.201077Z\",\"shell.execute_reply\":\"2025-06-03T17:56:22.207195Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 이상치 처리: 11 초과 제거, 결측값은 최빈값으로 대체\nx.loc[x['Num_Credit_Card'] > 11, 'Num_Credit_Card'] = np.nan\nx['Num_Credit_Card'].fillna(x['Num_Credit_Card'].mode()[0], inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:22.209408Z\",\"iopub.execute_input\":\"2025-06-03T17:56:22.209663Z\",\"iopub.status.idle\":\"2025-06-03T17:56:22.685945Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:22.209645Z\",\"shell.execute_reply\":\"2025-06-03T17:56:22.685128Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Num_Credit_Card', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Interest_Rate 대출 이자율\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:22.686753Z\",\"iopub.execute_input\":\"2025-06-03T17:56:22.687011Z\",\"iopub.status.idle\":\"2025-06-03T17:56:23.186193Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:22.686991Z\",\"shell.execute_reply\":\"2025-06-03T17:56:23.185463Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Interest_Rate', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:23.186753Z\",\"iopub.execute_input\":\"2025-06-03T17:56:23.186926Z\",\"iopub.status.idle\":\"2025-06-03T17:56:23.193202Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:23.186913Z\",\"shell.execute_reply\":\"2025-06-03T17:56:23.192263Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 이상치 처리: 34 초과 제거, 결측값은 최빈값으로 대체\nx.loc[x['Interest_Rate'] > 34, 'Interest_Rate'] = np.nan\nx['Interest_Rate'].fillna(x['Interest_Rate'].mode()[0], inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:23.194100Z\",\"iopub.execute_input\":\"2025-06-03T17:56:23.194354Z\",\"iopub.status.idle\":\"2025-06-03T17:56:23.687531Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:23.194334Z\",\"shell.execute_reply\":\"2025-06-03T17:56:23.686659Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Interest_Rate', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Num_of_Loan 대출 건수\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:23.688414Z\",\"iopub.execute_input\":\"2025-06-03T17:56:23.688666Z\",\"iopub.status.idle\":\"2025-06-03T17:56:24.233347Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:23.688645Z\",\"shell.execute_reply\":\"2025-06-03T17:56:24.232319Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Num_of_Loan', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:24.239545Z\",\"iopub.execute_input\":\"2025-06-03T17:56:24.239804Z\",\"iopub.status.idle\":\"2025-06-03T17:56:24.247767Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:24.239787Z\",\"shell.execute_reply\":\"2025-06-03T17:56:24.246772Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 이상치 제거: 음수 및 9 초과 제거, 결측값 중앙값 대체\nx.loc[(x['Num_of_Loan'] < 0) | (x['Num_of_Loan'] > 9), 'Num_of_Loan'] = np.nan\nx['Num_of_Loan'].fillna(x['Num_of_Loan'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:24.249084Z\",\"iopub.execute_input\":\"2025-06-03T17:56:24.249448Z\",\"iopub.status.idle\":\"2025-06-03T17:56:24.707596Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:24.249423Z\",\"shell.execute_reply\":\"2025-06-03T17:56:24.706433Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Num_of_Loan', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Num_of_Delayed_Payment 연체 횟수\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:24.708983Z\",\"iopub.execute_input\":\"2025-06-03T17:56:24.709305Z\",\"iopub.status.idle\":\"2025-06-03T17:56:25.173639Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:24.709283Z\",\"shell.execute_reply\":\"2025-06-03T17:56:25.172702Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Num_of_Delayed_Payment', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:25.174497Z\",\"iopub.execute_input\":\"2025-06-03T17:56:25.174701Z\",\"iopub.status.idle\":\"2025-06-03T17:56:25.181796Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:25.174686Z\",\"shell.execute_reply\":\"2025-06-03T17:56:25.181027Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 이상치 제거: 음수 및 28 초과 제거, 중앙값 대체\nx.loc[(x['Num_of_Delayed_Payment'] < 0) | (x['Num_of_Delayed_Payment'] > 28), 'Num_of_Delayed_Payment'] = np.nan\nx['Num_of_Delayed_Payment'].fillna(x['Num_of_Delayed_Payment'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:25.182643Z\",\"iopub.execute_input\":\"2025-06-03T17:56:25.182849Z\",\"iopub.status.idle\":\"2025-06-03T17:56:25.657470Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:25.182834Z\",\"shell.execute_reply\":\"2025-06-03T17:56:25.656499Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Num_of_Delayed_Payment', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Num_Credit_Inquiries 신용 조회 횟수\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:25.658363Z\",\"iopub.execute_input\":\"2025-06-03T17:56:25.658664Z\",\"iopub.status.idle\":\"2025-06-03T17:56:26.154064Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:25.658641Z\",\"shell.execute_reply\":\"2025-06-03T17:56:26.153248Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Num_Credit_Inquiries', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:26.154935Z\",\"iopub.execute_input\":\"2025-06-03T17:56:26.155286Z\",\"iopub.status.idle\":\"2025-06-03T17:56:26.161626Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:26.155258Z\",\"shell.execute_reply\":\"2025-06-03T17:56:26.160335Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 결측값 처리: 중앙값 대체\nx['Num_Credit_Inquiries'].fillna(x['Num_Credit_Inquiries'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:26.162601Z\",\"iopub.execute_input\":\"2025-06-03T17:56:26.162846Z\",\"iopub.status.idle\":\"2025-06-03T17:56:26.651791Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:26.162822Z\",\"shell.execute_reply\":\"2025-06-03T17:56:26.650989Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Num_Credit_Inquiries', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Outstanding_Debt 미상환 부채 금액\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:26.652661Z\",\"iopub.execute_input\":\"2025-06-03T17:56:26.652905Z\",\"iopub.status.idle\":\"2025-06-03T17:56:27.101083Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:26.652885Z\",\"shell.execute_reply\":\"2025-06-03T17:56:27.100303Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Outstanding_Debt', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:27.101874Z\",\"iopub.execute_input\":\"2025-06-03T17:56:27.102157Z\",\"iopub.status.idle\":\"2025-06-03T17:56:27.107866Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:27.102135Z\",\"shell.execute_reply\":\"2025-06-03T17:56:27.107020Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 결측값 처리: 중앙값 대체\nx['Outstanding_Debt'].fillna(x['Outstanding_Debt'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:27.108870Z\",\"iopub.execute_input\":\"2025-06-03T17:56:27.109198Z\",\"iopub.status.idle\":\"2025-06-03T17:56:27.577613Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:27.109178Z\",\"shell.execute_reply\":\"2025-06-03T17:56:27.576584Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Outstanding_Debt', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Credit_Utilization_Ratio 신용 사용률 (사용 금액 / 한도)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:27.578804Z\",\"iopub.execute_input\":\"2025-06-03T17:56:27.579087Z\",\"iopub.status.idle\":\"2025-06-03T17:56:28.081090Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:27.579067Z\",\"shell.execute_reply\":\"2025-06-03T17:56:28.080285Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Credit_Utilization_Ratio', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:28.081898Z\",\"iopub.execute_input\":\"2025-06-03T17:56:28.082430Z\",\"iopub.status.idle\":\"2025-06-03T17:56:28.086214Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:28.082407Z\",\"shell.execute_reply\":\"2025-06-03T17:56:28.085728Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 결측값 처리: 중앙값 대체\nx['Credit_Utilization_Ratio'].fillna(x['Credit_Utilization_Ratio'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:28.086674Z\",\"iopub.execute_input\":\"2025-06-03T17:56:28.086866Z\",\"iopub.status.idle\":\"2025-06-03T17:56:28.600492Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:28.086847Z\",\"shell.execute_reply\":\"2025-06-03T17:56:28.599614Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Credit_Utilization_Ratio', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Total_EMI_per_month 월별 총 상환금 (원금 및 이자 포함)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:28.601437Z\",\"iopub.execute_input\":\"2025-06-03T17:56:28.601699Z\",\"iopub.status.idle\":\"2025-06-03T17:56:29.077189Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:28.601677Z\",\"shell.execute_reply\":\"2025-06-03T17:56:29.076014Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Total_EMI_per_month', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:29.078158Z\",\"iopub.execute_input\":\"2025-06-03T17:56:29.078461Z\",\"iopub.status.idle\":\"2025-06-03T17:56:29.084242Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:29.078434Z\",\"shell.execute_reply\":\"2025-06-03T17:56:29.083482Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 결측값 처리: 중앙값 대체\nx['Total_EMI_per_month'].fillna(x['Total_EMI_per_month'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:29.085121Z\",\"iopub.execute_input\":\"2025-06-03T17:56:29.085393Z\",\"iopub.status.idle\":\"2025-06-03T17:56:29.956805Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:29.085374Z\",\"shell.execute_reply\":\"2025-06-03T17:56:29.955020Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Total_EMI_per_month', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Amount_invested_monthly 월별 투자 금액\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:29.957900Z\",\"iopub.execute_input\":\"2025-06-03T17:56:29.958197Z\",\"iopub.status.idle\":\"2025-06-03T17:56:30.478428Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:29.958176Z\",\"shell.execute_reply\":\"2025-06-03T17:56:30.477080Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Amount_invested_monthly', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:30.479455Z\",\"iopub.execute_input\":\"2025-06-03T17:56:30.480284Z\",\"iopub.status.idle\":\"2025-06-03T17:56:30.485432Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:30.480247Z\",\"shell.execute_reply\":\"2025-06-03T17:56:30.484705Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 결측값 처리: 중앙값 대체\nx['Amount_invested_monthly'].fillna(x['Amount_invested_monthly'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:30.486442Z\",\"iopub.execute_input\":\"2025-06-03T17:56:30.486736Z\",\"iopub.status.idle\":\"2025-06-03T17:56:31.019697Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:30.486716Z\",\"shell.execute_reply\":\"2025-06-03T17:56:31.018798Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Amount_invested_monthly', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Monthly_Balance 월별 계좌 잔액\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:31.020617Z\",\"iopub.execute_input\":\"2025-06-03T17:56:31.020895Z\",\"iopub.status.idle\":\"2025-06-03T17:56:31.547003Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:31.020876Z\",\"shell.execute_reply\":\"2025-06-03T17:56:31.545997Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Monthly_Balance', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:31.547889Z\",\"iopub.execute_input\":\"2025-06-03T17:56:31.548163Z\",\"iopub.status.idle\":\"2025-06-03T17:56:31.554257Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:31.548144Z\",\"shell.execute_reply\":\"2025-06-03T17:56:31.553330Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 결측값 처리: 중앙값 대체\nx['Monthly_Balance'].fillna(x['Monthly_Balance'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:31.555678Z\",\"iopub.execute_input\":\"2025-06-03T17:56:31.556003Z\",\"iopub.status.idle\":\"2025-06-03T17:56:32.089869Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:31.555981Z\",\"shell.execute_reply\":\"2025-06-03T17:56:32.088748Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Monthly_Balance', data=x, i=1)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## Credit_History_Months 신용 거래 기간 (월)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:32.090692Z\",\"iopub.execute_input\":\"2025-06-03T17:56:32.090912Z\",\"iopub.status.idle\":\"2025-06-03T17:56:32.594191Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:32.090895Z\",\"shell.execute_reply\":\"2025-06-03T17:56:32.593157Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 전 시각화\nDistribution(column='Credit_History_Months', data=x, i=0)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:32.595121Z\",\"iopub.execute_input\":\"2025-06-03T17:56:32.595368Z\",\"iopub.status.idle\":\"2025-06-03T17:56:32.602254Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:32.595349Z\",\"shell.execute_reply\":\"2025-06-03T17:56:32.601357Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 이상치 제거: 720개월 초과 제거, 중앙값 대체\nx.loc[x['Credit_History_Months'] > 720, 'Credit_History_Months'] = np.nan\nx['Credit_History_Months'].fillna(x['Credit_History_Months'].median(), inplace=True)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:32.602910Z\",\"iopub.execute_input\":\"2025-06-03T17:56:32.603122Z\",\"iopub.status.idle\":\"2025-06-03T17:56:33.113902Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:32.603106Z\",\"shell.execute_reply\":\"2025-06-03T17:56:33.113031Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전처리 후 시각화\nDistribution(column='Credit_History_Months', data=x, i=1)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:33.114823Z\",\"iopub.execute_input\":\"2025-06-03T17:56:33.115131Z\",\"iopub.status.idle\":\"2025-06-03T17:56:33.143443Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:33.115112Z\",\"shell.execute_reply\":\"2025-06-03T17:56:33.142771Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 이상치 클리핑 (IQR)\ndef clip_outliers(df, columns):\n    for col in columns:\n        Q1 = df[col].quantile(0.25)\n        Q3 = df[col].quantile(0.75)\n        IQR = Q3 - Q1\n        lower_bound = Q1 - 1.5 * IQR\n        upper_bound = Q3 + 1.5 * IQR\n        df[col] = df[col].clip(lower=lower_bound, upper=upper_bound)\n\n# 클리핑 적용 대상 변수\nclip_columns = [\n    'Annual_Income', 'Delay_from_due_date', 'Num_Credit_Inquiries', 'Outstanding_Debt',\n    'Monthly_Inhand_Salary', 'Credit_Utilization_Ratio', 'Total_EMI_per_month',\n    'Amount_invested_monthly', 'Monthly_Balance', 'Num_Credit_Inquiries', 'Outstanding_Debt'\n]\n\n# 이상치 클리핑 실행\nclip_outliers(x, clip_columns)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:33.144151Z\",\"iopub.execute_input\":\"2025-06-03T17:56:33.144336Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.464412Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:33.144320Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.462093Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 이상치 boxplot 시각화\ndef plot_multiple_outliers(df):\n    numeric_cols = df.select_dtypes(include=['number']).columns\n    n = len(numeric_cols)\n\n    plt.figure(figsize=(10, 2 * n))\n\n    for i, col in enumerate(numeric_cols, 1):\n        plt.subplot(n, 1, i)\n        sns.boxplot(x=df[col])\n        plt.title(f'Boxplot for {col}')\n        plt.tight_layout()\n\n    plt.show()\n\n# 이상치 시각화 실행\nplot_multiple_outliers(x)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.465119Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.465415Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.484117Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.465390Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.483124Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.485359Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.485673Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.540352Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.485650Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.539596Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx.describe().T\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.541645Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.541984Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.551124Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.541937Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.550282Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx.isna().sum()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.552046Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.552276Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.576319Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.552254Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.575444Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx.info()\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 5. 파생변수\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.577144Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.577395Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.596693Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.577372Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.595426Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx['Interest_Stress'] = x['Interest_Rate'] * x['Outstanding_Debt']\nx['Late_Payment_Score'] = x['Delay_from_due_date'] * x['Num_of_Delayed_Payment']\nx['Risk_Score'] = (\n    x['Monthly_Balance'] / (x['Total_EMI_per_month'] + 1) * 0.3 +\n    x['Late_Payment_Score'] * 0.3 +\n    x['Interest_Stress'] * 0.4\n)\nx['Delayed_Payment_Ratio'] = x['Num_of_Delayed_Payment'] / (x['Credit_History_Months'] + 1)\nx['Debt_to_Salary'] = x['Outstanding_Debt'] / (x['Monthly_Inhand_Salary'] + 1)\nx['EMI_to_Salary'] = x['Total_EMI_per_month'] / (x['Monthly_Inhand_Salary'] + 1)\nx['Credit_Age_Index'] = x['Credit_History_Months'] / (x['Age'] + 1)\nx['Balance_to_EMI'] = x['Monthly_Balance'] / (x['Total_EMI_per_month'] + 1)\n\n# 핵심 파생 변수만 결측치/무한치 처리\nderived_cols = [\n    'Interest_Stress', 'Late_Payment_Score', 'Risk_Score',\n    'Delayed_Payment_Ratio', 'Debt_to_Salary',\n    'EMI_to_Salary', 'Credit_Age_Index', 'Balance_to_EMI'\n]\nx[derived_cols] = x[derived_cols].replace([np.inf, -np.inf], np.nan)\nx[derived_cols] = x[derived_cols].fillna(x[derived_cols].median(numeric_only=True))\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 6. 전처리 이후 데이터 분리\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.597403Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.597618Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.627932Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.597605Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.627051Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# is_train 값이 1인 데이터는 학습용, 0인 데이터는 테스트용으로 분리\n# 분리 후 'is_train' 컬럼은 필요 없으므로 drop\nx_train = x[x['is_train'] == 1].drop(columns='is_train')\nx_test = x[x['is_train'] == 0].drop(columns='is_train')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.756352Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.756512Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.761408Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.756499Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.760287Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx_train.shape, x_test.shape\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.762200Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.762429Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.784231Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.762410Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.783464Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx_train.info()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.784936Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.785399Z\",\"iopub.status.idle\":\"2025-06-03T17:56:39.795826Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.785383Z\",\"shell.execute_reply\":\"2025-06-03T17:56:39.795129Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nx_test.info()\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 7. 변수 상관관계 분석\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# [참고] Credit Score Multi-Class Classification Part:2 ML\n# \n#  - https://www.kaggle.com/code/clkmuhammed/credit-score-multi-class-classification-part-2-ml#Import-Libraries\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:39.866240Z\",\"iopub.execute_input\":\"2025-06-03T17:56:39.866645Z\",\"iopub.status.idle\":\"2025-06-03T17:56:42.954152Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:39.866611Z\",\"shell.execute_reply\":\"2025-06-03T17:56:42.952991Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 변수 간 상관관계\nnumeric_cols = x_train.select_dtypes(include='number').columns\n\n# 상관관계 행렬 계산\ncorr_matrix = x_train[numeric_cols].corr()\n\n# 히트맵 시각화\nplt.figure(figsize=(16, 12))\nsns.heatmap(corr_matrix, annot=True, fmt=\".2f\", cmap='coolwarm', square=True, linewidths=0.5)\nplt.title('Correlation Heatmap (Numeric Features)', fontsize=16)\nplt.tight_layout()\nplt.show()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:42.955126Z\",\"iopub.execute_input\":\"2025-06-03T17:56:42.955369Z\",\"iopub.status.idle\":\"2025-06-03T17:56:43.061684Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:42.955351Z\",\"shell.execute_reply\":\"2025-06-03T17:56:43.060830Z\"}}\n# Credit_Score 클래스 분포\ntrain = pd.concat([x_train, y_train], axis=1)\n\nplt.figure(figsize=(6, 4))\nsns.countplot(x='Credit_Score', data=train, palette='Set2')\n\nplt.xlabel('Credit Class')\nplt.ylabel('Count')\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:43.062494Z\",\"iopub.execute_input\":\"2025-06-03T17:56:43.062698Z\",\"iopub.status.idle\":\"2025-06-03T17:56:49.962072Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:43.062683Z\",\"shell.execute_reply\":\"2025-06-03T17:56:49.960905Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 수치형 변수 자동 선택\nnumeric_cols = train.select_dtypes(include=['int64', 'float64']).columns.tolist()\n\n# Credit_Score는 범주형 기준이므로 제외하지 않음\nncols = 3\nnrows = (len(numeric_cols) + ncols - 1) // ncols\nplt.figure(figsize=(16, 5 * nrows))\n\nfor i, col in enumerate(numeric_cols):\n    plt.subplot(nrows, ncols, i + 1)\n    sns.boxplot(data=train, x='Credit_Score', y=col, palette='Set2')\n    plt.title(f'{col}')\n\nplt.tight_layout()\nplt.show()\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# # 모델링\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 1. SHAP 시각화\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# [참고] XGBoost explainability with SHAP\n# https://www.kaggle.com/code/bryanb/xgboost-explainability-with-shap\n# \n# 머신러닝 모델은 예측 정확도는 높지만, 그 결과가 왜 그렇게 나왔는지 해석하기 어려운 경우가 많습니다.\n# 특히 XGBoost, RandomForest, CatBoost 같은 복잡한 앙상블 모델은 내부 구조가 블랙박스처럼 작동하여,\n# 각 피처가 예측에 어떤 영향을 주었는지 파악하기 힘든 문제가 발생합니다.\n# \n# 즉, 모델은 잘 작동하고 있지만, '왜 그렇게 예측했는가?'에 대한 설명이 부족하기 때문에\n# 결정에 대한 신뢰도가 떨어지고, 실제 적용 현장에서 문제가 발생할 수 있습니다.\n# \n# 이러한 상황에서 SHAP은 각 피처가 예측 결과에 얼마나, 어떻게 영향을 미쳤는지를 정량적으로 설명해줍니다.\n# 각 피처의 기여도를 수치로 표현할 뿐만 아니라, 이를 직관적인 시각화로 제공하여\n# 복잡한 모델의 예측 과정을 사람도 이해할 수 있도록 돕는 도구입니다.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:49.963135Z\",\"iopub.execute_input\":\"2025-06-03T17:56:49.963423Z\",\"iopub.status.idle\":\"2025-06-03T17:56:50.827872Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:49.963400Z\",\"shell.execute_reply\":\"2025-06-03T17:56:50.827028Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 중요 변수 선택 전 XGBoost 학습\nxgb_model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', random_state=42)\nxgb_model.fit(x_train, y_train.values.ravel())\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:56:50.828776Z\",\"iopub.execute_input\":\"2025-06-03T17:56:50.829066Z\",\"iopub.status.idle\":\"2025-06-03T17:57:02.004322Z\",\"shell.execute_reply.started\":\"2025-06-03T17:56:50.829038Z\",\"shell.execute_reply\":\"2025-06-03T17:57:02.003244Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# SHAP 시각화 (Top 30 features)\nexplainer = shap.TreeExplainer(xgb_model)\nshap_values = explainer.shap_values(x_train)\n\nshap.summary_plot(shap_values, x_train, plot_type=\"bar\", max_display=30)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:57:02.005335Z\",\"iopub.execute_input\":\"2025-06-03T17:57:02.005617Z\",\"iopub.status.idle\":\"2025-06-03T17:57:02.015135Z\",\"shell.execute_reply.started\":\"2025-06-03T17:57:02.005594Z\",\"shell.execute_reply\":\"2025-06-03T17:57:02.014187Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 중요 변수 15개 추출 및 선택\nimportance = xgb_model.feature_importances_\nimportance_df = pd.DataFrame({'feature': x_train.columns, 'importance': importance})\nselected_c = importance_df.sort_values(by='importance', ascending=False)['feature'].head(15).tolist()\n\nx_train_top = x_train[selected_c].copy()\nx_test_top = x_test[selected_c].copy()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:57:02.016109Z\",\"iopub.execute_input\":\"2025-06-03T17:57:02.016384Z\",\"iopub.status.idle\":\"2025-06-03T17:57:02.039014Z\",\"shell.execute_reply.started\":\"2025-06-03T17:57:02.016362Z\",\"shell.execute_reply\":\"2025-06-03T17:57:02.038261Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 클래스 가중치 자동 계산\nclass_weights = compute_class_weight(class_weight='balanced',\n                                     classes=np.unique(y_train['Credit_Score']),\n                                     y=y_train['Credit_Score'])\n\n# 딕셔너리 형태로 변환\nclass_weight_dict = dict(zip(np.unique(y_train['Credit_Score']), class_weights))\nprint(\"클래스 가중치:\", class_weight_dict)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# *SMOTE 적용*\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# [참고] IQR을 이용한 Outlier 탐지 + SMOTE Oversampling\n#  - https://www.kaggle.com/code/dogdriip/iqr-outlier-smote-oversampling/code#SMOTE-%EC%98%A4%EB%B2%84%EC%83%98%ED%94%8C%EB%A7%81-%EC%A0%81%EC%9A%A9\n# \n# \n# **SMOTE 오버샘플링 적용**\n# \n# 레이블이 불균형한 분포를 가진 데이터 세트를 학습시킬 때 예측 성능의 문제가 발생할 수 있는데, 이는 이상 레이블을 가지는 데이터 건수가 정상 레이블을 가진 데이터 건수에 비해 너무 적기 때문에 발생합니다. 즉 이상 레이블을 가지는 데이터 건수는 매우 적기 때문에 제대로 다양한 유형을 학습하지 못하는 반면, 정상 레이블을 가지는 데이터 건수는 매우 많기 때문에 일방적으로 정상 레이블로 치우친 학습을 수행해 제대로 된 이상 데이터 검출이 어려워지기 쉽습니다.\n# \n# 오버 샘플링은 이상 데이터와 같이 적은 데이터 세트를 증식하여 학습을 위한 충분한 데이터를 확보하는 방법입니다. 원본 데이터의 피쳐 값들을 아주 약간만 변경하여 증식합니다. 대표적으로 SMOTE(Synthetic Minority Over-sampling Technique) 방법이 있습니다. SMOTE는 적은 데이터 세트에 있는 개별 데이터들의 K-Nearest-Neighbor를 찾아서 이 데이터와 K개 이웃들의 차이를 일정 값으로 만들어서 기존 데이터와 약간 차이가 나는 새로운 데이터들을 생성하는 방식입니다.\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:57:02.039719Z\",\"iopub.execute_input\":\"2025-06-03T17:57:02.039893Z\",\"iopub.status.idle\":\"2025-06-03T17:57:02.065749Z\",\"shell.execute_reply.started\":\"2025-06-03T17:57:02.039879Z\",\"shell.execute_reply\":\"2025-06-03T17:57:02.064451Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 전체에서 분리\nx_full, y_full = x_train_top.copy(), y_train.values.ravel()\n\nx_train_split, x_val_split, y_train_split, y_val_split = train_test_split(\n    x_full, y_full, test_size=0.2, stratify=y_full, random_state=42\n)\n\nx_test_final = x_test_top.copy()\n\n# 하이퍼파라미터 튜닝용 변수\nx_trn, y_trn = x_train_split.copy(), y_train_split.copy()\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 3. 각 모델 선정 및 최적 하이퍼파라미터 설정\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:57:02.066495Z\",\"iopub.execute_input\":\"2025-06-03T17:57:02.066705Z\",\"iopub.status.idle\":\"2025-06-03T17:57:02.078596Z\",\"shell.execute_reply.started\":\"2025-06-03T17:57:02.066690Z\",\"shell.execute_reply\":\"2025-06-03T17:57:02.077826Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 각 모델과 최적 하이퍼파라미터 설정\nrf = RandomForestClassifier(random_state=42, class_weight=class_weight_dict)\nrf_params = {\n    'n_estimators': [200, 300],\n    'max_depth': [10, 12],  # 기존보다 축소\n    'min_samples_split': [4, 6],\n    'min_samples_leaf': [2, 4],  # 추가\n    'max_features': ['sqrt']\n}\n\nxgb = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', random_state=42)\nxgb_params = {\n    'n_estimators': [200, 300],\n    'learning_rate': [0.03, 0.05],\n    'max_depth': [6, 8],\n    'subsample': [0.8],\n    'colsample_bytree': [1.0],\n    'gamma': [0.1, 0.3]\n}\n\ngb = GradientBoostingClassifier(random_state=42)\ngb_params = {\n    'n_estimators': [100, 200],\n    'max_depth': [5, 6],\n    'learning_rate': [0.01, 0.05],\n    'subsample': [0.6, 0.8]\n}\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T17:57:02.079406Z\",\"iopub.execute_input\":\"2025-06-03T17:57:02.079649Z\",\"iopub.status.idle\":\"2025-06-03T18:00:43.461060Z\",\"shell.execute_reply.started\":\"2025-06-03T17:57:02.079628Z\",\"shell.execute_reply\":\"2025-06-03T18:00:43.460050Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 모델별 RandomizedSearchCV 실행하여 최적 하이퍼파라미터 선정\ndef tune_model(model, param_grid, name='model'):\n    search = RandomizedSearchCV(model, param_distributions=param_grid, n_iter=20,\n                                scoring='f1_macro', cv=3, verbose=1, random_state=42, n_jobs=-1)\n    search.fit(x_trn, y_trn)\n    \n    # 최적 하이퍼파라미터 출력 및 저장\n    print(f\"\\n{name} Best Params:\", search.best_params_)\n    return search.best_estimator_, search.best_params_\n\n# 하이퍼파라미터 튜닝 실행\nprint(\"\\nRandomForest\")\nbest_rf, best_rf_params = tune_model(rf, rf_params, name=\"RandomForest\")\n\nprint(\"\\nXGBoost\")\nbest_xgb, best_xgb_params = tune_model(xgb, xgb_params, name=\"XGBoost\")\n\nprint(\"\\nGradientBoosting\")\nbest_gb, best_gb_params = tune_model(gb, gb_params, name=\"GradientBoosting\")\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:00:43.462093Z\",\"iopub.execute_input\":\"2025-06-03T18:00:43.462381Z\",\"iopub.status.idle\":\"2025-06-03T18:00:43.467397Z\",\"shell.execute_reply.started\":\"2025-06-03T18:00:43.462362Z\",\"shell.execute_reply\":\"2025-06-03T18:00:43.466326Z\"}}\nbase_models = [\n    ('rf', best_rf),\n    ('xgb', best_xgb),\n    ('gb', best_gb),\n]\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:00:43.468383Z\",\"iopub.execute_input\":\"2025-06-03T18:00:43.468645Z\",\"iopub.status.idle\":\"2025-06-03T18:00:43.490319Z\",\"shell.execute_reply.started\":\"2025-06-03T18:00:43.468627Z\",\"shell.execute_reply\":\"2025-06-03T18:00:43.488899Z\"}}\nmeta_model = XGBClassifier(\n    **best_xgb_params,\n    reg_alpha=1.0,        # L1 penalty\n    reg_lambda=1.5,       # L2 penalty\n    use_label_encoder=False,\n    eval_metric='mlogloss',\n    random_state=42\n)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:00:43.491476Z\",\"iopub.execute_input\":\"2025-06-03T18:00:43.492042Z\",\"iopub.status.idle\":\"2025-06-03T18:00:43.510684Z\",\"shell.execute_reply.started\":\"2025-06-03T18:00:43.492011Z\",\"shell.execute_reply\":\"2025-06-03T18:00:43.509743Z\"}}\nstack_model = StackingClassifier(\n    estimators=base_models,\n    final_estimator=meta_model,\n    stack_method='predict',\n    cv=5,\n    passthrough=False,\n    n_jobs=-1\n)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# ## 4. 개별 모델별 성능 평가\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:00:43.511776Z\",\"iopub.execute_input\":\"2025-06-03T18:00:43.512042Z\",\"iopub.status.idle\":\"2025-06-03T18:00:43.538410Z\",\"shell.execute_reply.started\":\"2025-06-03T18:00:43.512016Z\",\"shell.execute_reply\":\"2025-06-03T18:00:43.537423Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndef evaluate(model_name, model, x_data, y_true):\n    y_pred = model.predict(x_data)\n    acc = accuracy_score(y_true, y_pred)\n    f1 = f1_score(y_true, y_pred, average='macro')\n    \n    print(f\"\\n===== [{model_name}] 평가 =====\")\n    print(f\"Accuracy : {acc:.4f}\")\n    print(f\"Macro F1 : {f1:.4f}\")\n    print(\"Classification Report:\")\n    print(classification_report(y_true, y_pred, digits=4))\n    \n    # 혼동 행렬 시각화\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(6,5))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=[0,1,2], yticklabels=[0,1,2])\n    plt.title(f\"{model_name} - Confusion Matrix\")\n    plt.xlabel(\"Predicted\")\n    plt.ylabel(\"True\")\n    plt.tight_layout()\n    plt.show()\n    \n    return acc, f1\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:00:43.539676Z\",\"iopub.execute_input\":\"2025-06-03T18:00:43.540004Z\",\"iopub.status.idle\":\"2025-06-03T18:00:43.559175Z\",\"shell.execute_reply.started\":\"2025-06-03T18:00:43.539974Z\",\"shell.execute_reply\":\"2025-06-03T18:00:43.558309Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndef full_model_analysis(model_name, model, x_train_split, y_train_split, x_val_split, y_val_split, x_full, y_full, x_test_final):\n    print(f\"\\n=== 모델 분석 시작: {model_name} ===\")\n\n    print(\"\\n[1] Train Set\")\n    evaluate(f\"{model_name} - Train\", model, x_train_split, y_train_split)\n\n    print(\"\\n[2] Validation Set\")\n    evaluate(f\"{model_name} - Validation\", model, x_val_split, y_val_split)\n\n    print(\"\\n[3] Full Train Set \")\n    evaluate(f\"{model_name} - Full Train\", model, x_full, y_full)\n\n    print(\"\\n[4] Test Set 예측 결과 (상위 10개)\")\n    y_test_pred = model.predict(x_test_final)\n    print(\"예측 샘플:\", y_test_pred[:10])\n\n    return y_test_pred\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:00:43.560167Z\",\"iopub.execute_input\":\"2025-06-03T18:00:43.560430Z\",\"iopub.status.idle\":\"2025-06-03T18:00:43.586157Z\",\"shell.execute_reply.started\":\"2025-06-03T18:00:43.560408Z\",\"shell.execute_reply\":\"2025-06-03T18:00:43.584761Z\"}}\ndef kfold_model_analysis(model_name, model, x, y, x_test_final, n_splits=5, verbose=True):\n    print(f\"\\n=== [KFold] {model_name} 시작 ===\")\n\n    skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n    f1_scores = []\n    test_preds = []\n\n    for fold, (train_idx, val_idx) in enumerate(skf.split(x, y)):\n        x_train, x_val = x.iloc[train_idx], x.iloc[val_idx]\n\n        if isinstance(y, pd.Series):\n            y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n        else:\n            y_train, y_val = y[train_idx], y[val_idx]\n\n        model.fit(x_train, y_train)\n        val_preds = model.predict(x_val)\n        f1 = f1_score(y_val, val_preds, average='macro')\n        f1_scores.append(f1)\n\n        if verbose:\n            print(f\"\\nFold {fold+1} - Macro F1: {f1:.4f}\")\n            print(classification_report(y_val, val_preds))\n\n        # 예측 시 컬럼 동일하게 정렬\n        test_preds.append(model.predict(x_test_final[x_train.columns]))\n\n    print(f\"\\n평균 Macro F1: {np.mean(f1_scores):.4f} ± {np.std(f1_scores):.4f}\")\n    return np.mean(f1_scores)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:00:43.587279Z\",\"iopub.execute_input\":\"2025-06-03T18:00:43.587555Z\",\"iopub.status.idle\":\"2025-06-03T18:01:26.606329Z\",\"shell.execute_reply.started\":\"2025-06-03T18:00:43.587533Z\",\"shell.execute_reply\":\"2025-06-03T18:01:26.605540Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 모델 학습\nbest_rf.fit(x_train_split, y_train_split)\nbest_xgb.fit(x_train_split, y_train_split)\nbest_gb.fit(x_train_split, y_train_split)\nstack_model.fit(x_train_split, y_train_split)\n\n# 모델별 평가 실행\nrf_preds = full_model_analysis(\"RandomForest\", best_rf, x_train_split, y_train_split, x_val_split, y_val_split, x_full, y_full, x_test_final)\nxgb_preds = full_model_analysis(\"XGBoost\", best_xgb, x_train_split, y_train_split, x_val_split, y_val_split, x_full, y_full, x_test_final)\ngb_preds = full_model_analysis(\"GradientBoosting\", best_gb, x_train_split, y_train_split, x_val_split, y_val_split, x_full, y_full, x_test_final)\nstack_preds = full_model_analysis(\"Stacking\", stack_model, x_train_split, y_train_split, x_val_split, y_val_split, x_full, y_full, x_test_final)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:01:26.607114Z\",\"iopub.execute_input\":\"2025-06-03T18:01:26.607305Z\",\"iopub.status.idle\":\"2025-06-03T18:01:26.612406Z\",\"shell.execute_reply.started\":\"2025-06-03T18:01:26.607287Z\",\"shell.execute_reply\":\"2025-06-03T18:01:26.611729Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndef class_f1_detail(model, x, y, title=\"F1 by Class\"):\n    from sklearn.metrics import classification_report\n    report = classification_report(y, model.predict(x), output_dict=True)\n    f1s = [report[str(i)]['f1-score'] for i in range(3)]\n    plt.bar([0, 1, 2], f1s, tick_label=['Class 0', 'Class 1', 'Class 2'])\n    plt.title(title)\n    plt.ylim(0, 1)\n    plt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:01:26.613146Z\",\"iopub.execute_input\":\"2025-06-03T18:01:26.613367Z\",\"iopub.status.idle\":\"2025-06-03T18:01:26.634502Z\",\"shell.execute_reply.started\":\"2025-06-03T18:01:26.613349Z\",\"shell.execute_reply\":\"2025-06-03T18:01:26.633749Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndef inspect_misclassified(model, x, y):\n    y_pred = model.predict(x)\n    mis_idx = np.where(y != y_pred)[0]\n    mis_df = x.iloc[mis_idx].copy()\n    mis_df['true'] = y[mis_idx]\n    mis_df['pred'] = y_pred[mis_idx]\n    for pair in [(0,2), (2,0), (1,0)]:\n        subset = mis_df[(mis_df['true']==pair[0]) & (mis_df['pred']==pair[1])]\n        if len(subset) > 0:\n            print(f\"\\nMisclassified {pair[0]} → {pair[1]}: {len(subset)} samples\")\n            print(subset.mean().sort_values(ascending=False).head(10))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:01:26.635278Z\",\"iopub.execute_input\":\"2025-06-03T18:01:26.635612Z\",\"iopub.status.idle\":\"2025-06-03T18:01:26.649798Z\",\"shell.execute_reply.started\":\"2025-06-03T18:01:26.635593Z\",\"shell.execute_reply\":\"2025-06-03T18:01:26.649026Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndef show_prediction_confidence(model, x):\n    proba = model.predict_proba(x)\n    plt.hist(np.max(proba, axis=1), bins=50, color='skyblue')\n    plt.title(\"Prediction Confidence (Max Probability)\")\n    plt.xlabel(\"Confidence\")\n    plt.ylabel(\"Count\")\n    plt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:01:26.650645Z\",\"iopub.execute_input\":\"2025-06-03T18:01:26.650911Z\",\"iopub.status.idle\":\"2025-06-03T18:01:26.667975Z\",\"shell.execute_reply.started\":\"2025-06-03T18:01:26.650895Z\",\"shell.execute_reply\":\"2025-06-03T18:01:26.666878Z\"},\"jupyter\":{\"outputs_hidden\":false}}\ndef compare_models(models, x, y):\n    result = []\n    for name, model in models:\n        acc = accuracy_score(y, model.predict(x))\n        f1 = f1_score(y, model.predict(x), average='macro')\n        result.append((name, acc, f1))\n    return pd.DataFrame(result, columns=[\"Model\", \"Accuracy\", \"Macro F1\"])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:01:26.668911Z\",\"iopub.execute_input\":\"2025-06-03T18:01:26.669530Z\",\"iopub.status.idle\":\"2025-06-03T18:01:27.614106Z\",\"shell.execute_reply.started\":\"2025-06-03T18:01:26.669508Z\",\"shell.execute_reply\":\"2025-06-03T18:01:27.613308Z\"},\"jupyter\":{\"outputs_hidden\":false}}\nclass_f1_detail(stack_model, x_val_split, y_val_split)\ninspect_misclassified(stack_model, x_val_split, y_val_split)\nshow_prediction_confidence(stack_model, x_val_split)\ncompare_models([\n    (\"RandomForest\", best_rf),\n    (\"XGBoost\", best_xgb),\n    (\"GradientBoosting\", best_gb),\n    (\"Stacking\", stack_model),\n], x_val_split, y_val_split)\n\n# %% [markdown] {\"jupyter\":{\"outputs_hidden\":false}}\n# # Submission 결과 제출\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"scrolled\":true,\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:01:27.614870Z\",\"iopub.execute_input\":\"2025-06-03T18:01:27.615138Z\",\"iopub.status.idle\":\"2025-06-03T18:01:27.619429Z\",\"shell.execute_reply.started\":\"2025-06-03T18:01:27.615120Z\",\"shell.execute_reply\":\"2025-06-03T18:01:27.618815Z\"}}\n# 최종 학습용 모델 (스태킹)\nfinal_stack_model = StackingClassifier(\n    estimators=[\n        ('rf', best_rf),\n        ('xgb', best_xgb),\n        ('gb', best_gb),\n    ],\n    final_estimator=XGBClassifier(\n        **best_xgb_params,\n        reg_alpha=0.3,\n        reg_lambda=1.0,\n        use_label_encoder=False,\n        eval_metric='mlogloss',\n        random_state=42\n    ),\n    stack_method='predict',\n    passthrough=True,\n    cv=5,\n    n_jobs=-1\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:04:53.461297Z\",\"iopub.execute_input\":\"2025-06-03T18:04:53.461659Z\",\"iopub.status.idle\":\"2025-06-03T18:05:28.145626Z\",\"shell.execute_reply.started\":\"2025-06-03T18:04:53.461636Z\",\"shell.execute_reply\":\"2025-06-03T18:05:28.144552Z\"},\"jupyter\":{\"outputs_hidden\":false}}\n# 🔹 스태킹 모델 학습\nprint(\"\\n전체 데이터로 최종 모델 학습 중...\")\nfinal_stack_model.fit(x_full, y_full)\n\n# 🔹 테스트셋 feature 정렬 (훈련 컬럼 순서와 동일하게)\ntrained_cols = final_stack_model.feature_names_in_\nx_test_final_aligned = x_test_final[trained_cols]\n\n# 🔹 예측 수행\npred_test = final_stack_model.predict(x_test_final_aligned)\nproba_test = final_stack_model.predict_proba(x_test_final_aligned)\n\n# 🔹 후처리 없이 바로 결과 사용\nfinal_pred = pred_test\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:05:28.147232Z\",\"iopub.execute_input\":\"2025-06-03T18:05:28.147518Z\",\"iopub.status.idle\":\"2025-06-03T18:08:43.341429Z\",\"shell.execute_reply.started\":\"2025-06-03T18:05:28.147498Z\",\"shell.execute_reply\":\"2025-06-03T18:08:43.340617Z\"}}\n# RandomForest (KFold 평가)\n_ = kfold_model_analysis(\"RandomForest-KFold\", best_rf, x_full, y_full, x_test_final)\n\n# XGBoost (KFold 평가)\n_ = kfold_model_analysis(\"XGBoost-KFold\", best_xgb, x_full, y_full, x_test_final)\n\n# GradientBoosting (KFold 평가)\n_ = kfold_model_analysis(\"GradientBoosting-KFold\", best_gb, x_full, y_full, x_test_final)\n\n# Stacking (KFold 평가)\n_ = kfold_model_analysis(\"Stacking-KFold\", stack_model, x_full, y_full, x_test_final)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-06-03T18:08:43.342196Z\",\"iopub.execute_input\":\"2025-06-03T18:08:43.342391Z\",\"iopub.status.idle\":\"2025-06-03T18:09:06.004125Z\",\"shell.execute_reply.started\":\"2025-06-03T18:08:43.342375Z\",\"shell.execute_reply\":\"2025-06-03T18:09:06.003249Z\"}}\nprint(\"\\nPermutation Importance 분석 중...\")\n\n# 컬럼 정렬 일치시키기\nx_test_perm = x_test_final[final_stack_model.feature_names_in_]\n\nr = permutation_importance(final_stack_model, x_test_perm, final_pred, n_repeats=10, random_state=42)\nperm_sorted_idx = r.importances_mean.argsort()[::-1]\n\nplt.figure(figsize=(10, 6))\nsns.barplot(\n    x=r.importances_mean[perm_sorted_idx][:20],\n    y=x_test_perm.columns[perm_sorted_idx][:20]\n)\nplt.title(\"Permutation Importance (Top 20)\")\nplt.xlabel(\"Importance Mean\")\nplt.tight_layout()\nplt.show()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# 제출 파일 템플릿 로드\nresult = pd.read_csv('/kaggle/input/uou-ie-g-03874-spring-2025-term-project/ML_sample_submission.csv')\n\n# 예측 결과 삽입\nresult['Credit_Score'] = final_pred\n\n# 저장\nresult.to_csv('submission.csv', index=False)","metadata":{"_uuid":"b8b8e0c3-ac24-4309-8faf-44894482dd14","_cell_guid":"38231cde-cb8a-411b-a2bc-f07d7e01ddc6","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}